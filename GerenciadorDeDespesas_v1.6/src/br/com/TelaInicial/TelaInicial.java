package br.com.TelaInicial;

import br.com.Classes.Movimentacao;
import br.com.CrudMovimentacao.TelaNovaMovimentacao;
import br.com.CrudMovimentacao.TelaEditarMovimentacao;
import br.com.CrudMovimentacao.TelaAlterarStatus;
import br.com.Exceptions.DataSourceException;
import br.com.Exceptions.MovimentacaoException;
import br.com.Servicos.ServicoMovimentacao;
import br.com.Servicos.ServicoTelaInicial;
import java.awt.Dimension;
import java.math.BigDecimal;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jonat
 */
public class TelaInicial extends javax.swing.JFrame {

    TelaNovaMovimentacao telaNovaMovimentacao = null;
    TelaEditarMovimentacao telaEditarMovimentacao = null;
    TelaAlterarStatus telaAlterarStatus = null;
    ServicoTelaInicial servicoTelaInicial = new ServicoTelaInicial();

    /**
     * Creates new form TelaInicial
     *
     */
    public TelaInicial() {
        initComponents();
        jComboBoxMesVigente.setSelectedItem(servicoTelaInicial.mesVigente());
        jComboBoxAnoVigente.setSelectedItem(servicoTelaInicial.anoVigente());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktop = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMovimentacao = new javax.swing.JTable();
        jButtonNovaMovimentacao = new javax.swing.JButton();
        jButtonEditar = new javax.swing.JButton();
        jButtonRemover = new javax.swing.JButton();
        jButtonAlterarStatus = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();
        jLabelTotalDespesas = new javax.swing.JLabel();
        jLabelTotalReceita = new javax.swing.JLabel();
        jLabelTotalRestante = new javax.swing.JLabel();
        jButtonAtualizar = new javax.swing.JButton();
        jComboBoxMostrar = new javax.swing.JComboBox<>();
        jLabelMostrar = new javax.swing.JLabel();
        jComboBoxMesVigente = new javax.swing.JComboBox<>();
        jComboBoxAnoVigente = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        desktop.setBackground(new java.awt.Color(153, 153, 153));
        desktop.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gerenciador de Despesas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        desktop.setForeground(new java.awt.Color(102, 102, 102));

        jTableMovimentacao.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTableMovimentacao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tipo", "Nome da Movimentação", "Nome Pessoa", "Valor", "Vencimento / Recebimento", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableMovimentacao.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTableMovimentacaoComponentShown(evt);
            }
        });
        jScrollPane1.setViewportView(jTableMovimentacao);

        jButtonNovaMovimentacao.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonNovaMovimentacao.setForeground(new java.awt.Color(102, 102, 102));
        jButtonNovaMovimentacao.setText("Nova Movimentação");
        jButtonNovaMovimentacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovaMovimentacaoActionPerformed(evt);
            }
        });

        jButtonEditar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonEditar.setForeground(new java.awt.Color(102, 102, 102));
        jButtonEditar.setText("Editar");
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jButtonRemover.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonRemover.setForeground(new java.awt.Color(102, 102, 102));
        jButtonRemover.setText("Remover");
        jButtonRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoverActionPerformed(evt);
            }
        });

        jButtonAlterarStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonAlterarStatus.setForeground(new java.awt.Color(102, 102, 102));
        jButtonAlterarStatus.setText("Alterar Status");
        jButtonAlterarStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarStatusActionPerformed(evt);
            }
        });

        jButtonSair.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonSair.setForeground(new java.awt.Color(102, 102, 102));
        jButtonSair.setText("Sair");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        jLabelTotalDespesas.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelTotalDespesas.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTotalDespesas.setText("Despesas: ");
        jLabelTotalDespesas.setToolTipText("");

        jLabelTotalReceita.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelTotalReceita.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTotalReceita.setText("Receita: ");

        jLabelTotalRestante.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelTotalRestante.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTotalRestante.setText("Total: ");

        jButtonAtualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonAtualizar.setForeground(new java.awt.Color(102, 102, 102));
        jButtonAtualizar.setText("Atualizar");
        jButtonAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizarActionPerformed(evt);
            }
        });

        jComboBoxMostrar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jComboBoxMostrar.setForeground(new java.awt.Color(102, 102, 102));
        jComboBoxMostrar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Receita", "Despesa", "Stephanie", "Jonata", "Casa", "Carro", "Lazer" }));

        jLabelMostrar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelMostrar.setForeground(new java.awt.Color(255, 255, 255));
        jLabelMostrar.setText("Mostrar:");

        jComboBoxMesVigente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jComboBoxMesVigente.setForeground(new java.awt.Color(102, 102, 102));
        jComboBoxMesVigente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" }));
        jComboBoxMesVigente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMesVigenteActionPerformed(evt);
            }
        });

        jComboBoxAnoVigente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jComboBoxAnoVigente.setForeground(new java.awt.Color(102, 102, 102));
        jComboBoxAnoVigente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2017", "2018", "2019" }));

        desktop.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jButtonNovaMovimentacao, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jButtonEditar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jButtonRemover, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jButtonAlterarStatus, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jButtonSair, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jLabelTotalDespesas, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jLabelTotalReceita, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jLabelTotalRestante, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jButtonAtualizar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jComboBoxMostrar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jLabelMostrar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jComboBoxMesVigente, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jComboBoxAnoVigente, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
        desktop.setLayout(desktopLayout);
        desktopLayout.setHorizontalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(desktopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, desktopLayout.createSequentialGroup()
                        .addComponent(jComboBoxMesVigente, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxAnoVigente, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAtualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 353, Short.MAX_VALUE)
                        .addComponent(jLabelMostrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonNovaMovimentacao))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, desktopLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonSair, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, desktopLayout.createSequentialGroup()
                        .addComponent(jLabelTotalReceita)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelTotalDespesas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelTotalRestante)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonAlterarStatus)))
                .addContainerGap())
        );
        desktopLayout.setVerticalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(desktopLayout.createSequentialGroup()
                .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(desktopLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonNovaMovimentacao)
                            .addComponent(jComboBoxMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMostrar)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, desktopLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonAtualizar)
                            .addComponent(jComboBoxMesVigente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxAnoVigente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonAlterarStatus)
                        .addComponent(jButtonRemover)
                        .addComponent(jButtonEditar))
                    .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelTotalReceita)
                        .addComponent(jLabelTotalDespesas)
                        .addComponent(jLabelTotalRestante)))
                .addGap(18, 18, 18)
                .addComponent(jButtonSair)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNovaMovimentacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovaMovimentacaoActionPerformed
        if (telaNovaMovimentacao == null || !telaNovaMovimentacao.isDisplayable()) {
            telaNovaMovimentacao = new TelaNovaMovimentacao();
            desktop.add(telaNovaMovimentacao); //desktop é o panel inicial
            this.openFrameInCenter(telaNovaMovimentacao);
        }
        telaNovaMovimentacao.toFront();
    }//GEN-LAST:event_jButtonNovaMovimentacaoActionPerformed

    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
        final int row = jTableMovimentacao.getSelectedRow();
        Movimentacao movimentacao = null;

        if (row >= 0) {
            Integer id = (Integer) jTableMovimentacao.getValueAt(row, 0);
            try {
                movimentacao = ServicoMovimentacao.obterMovimentacao(id);

            } catch (MovimentacaoException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DataSourceException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            }
            TelaEditarMovimentacao.movimentacao = movimentacao;
            TelaEditarMovimentacao.id = id;
            if (telaEditarMovimentacao == null || !telaEditarMovimentacao.isDisplayable()) {
                telaEditarMovimentacao = new TelaEditarMovimentacao();
                desktop.add(telaEditarMovimentacao); //desktop é o panel inicial
                this.openFrameInCenter(telaEditarMovimentacao);
            }

            telaEditarMovimentacao.toFront();

        } else {
            JOptionPane.showMessageDialog(this, "Selecione a movimentação a ser editada!", "ERRO", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jButtonEditarActionPerformed

    private void jButtonAlterarStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarStatusActionPerformed
        final int row = jTableMovimentacao.getSelectedRow();
        Movimentacao movimentacao = null;

        if (row >= 0) {
            Integer id = (Integer) jTableMovimentacao.getValueAt(row, 0);
            try {
                movimentacao = ServicoMovimentacao.obterMovimentacao(id);

            } catch (MovimentacaoException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DataSourceException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            }
            TelaAlterarStatus.movimentacao = movimentacao;
            TelaAlterarStatus.id = id;
            if (telaAlterarStatus == null || !telaAlterarStatus.isDisplayable()) {
                telaAlterarStatus = new TelaAlterarStatus();
                desktop.add(telaAlterarStatus); //desktop é o panel inicial
                this.openFrameInCenter(telaAlterarStatus);
            }
            telaAlterarStatus.toFront();

        } else {
            JOptionPane.showMessageDialog(this, "Selecione a despesa a ser editada!", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonAlterarStatusActionPerformed

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        int dialogResult = JOptionPane.showConfirmDialog(this, "Deseja realmente fechar o programa?");
        if (dialogResult == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_jButtonSairActionPerformed

    private void jTableMovimentacaoComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTableMovimentacaoComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableMovimentacaoComponentShown

    private void jButtonAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizarActionPerformed

        List<Movimentacao> movimentacao = null;
        String palavra = null;
        BigDecimal somaDespesa = new BigDecimal("0");
        BigDecimal somaReceita = new BigDecimal("0");
        BigDecimal total = new BigDecimal("0");

        if (jComboBoxMostrar.getSelectedItem().toString().equalsIgnoreCase("Todos")) {
            try {
                movimentacao = ServicoMovimentacao.procurarMovimentacao(palavra);
            } catch (MovimentacaoException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DataSourceException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            }

            DefaultTableModel model = (DefaultTableModel) jTableMovimentacao.getModel();
            model.setRowCount(0);

            if (movimentacao == null || movimentacao.size() <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Não há movimentações cadastradas! ",
                        "Sem resultados", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                for (int i = 0; i < movimentacao.size(); i++) {
                    Object[] row = new Object[7];
                    Movimentacao mov = movimentacao.get(i);
                    try {
                        if (servicoTelaInicial.verificaMesTabela(mov.getDataMovimentacao(), jComboBoxMesVigente.getSelectedItem().toString()) == true
                                && servicoTelaInicial.verificaAnoTabela(mov.getDataMovimentacao(), jComboBoxAnoVigente.getSelectedItem().toString()) == true) {
                            row[0] = mov.getIdMovimentacao();
                            row[1] = mov.getTipoMovimentacao();
                            row[2] = mov.getNomeMovimentacao();
                            row[3] = mov.getProprietarioDaMovimentacao();
                            row[4] = mov.getValorMovimentacao().replace('.', ',');
                            row[5] = mov.getDataMovimentacao();
                            row[6] = mov.getStatusDespesa();
                            model.addRow(row);

                            if (mov.getTipoMovimentacao().equalsIgnoreCase("despesa")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaDespesa = somaDespesa.add(recebeValor);
                            } else if (mov.getTipoMovimentacao().equalsIgnoreCase("receita")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaReceita = somaReceita.add(recebeValor);
                            }
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            total = somaReceita.subtract(somaDespesa);
            jLabelTotalDespesas.setText("Despesas: R$ " + somaDespesa.toString().replace('.', ','));
            jLabelTotalReceita.setText("Receita: R$ " + somaReceita.toString().replace('.', ','));
            jLabelTotalRestante.setText("Total: R$ " + total.toString().replace('.', ','));

        } else if (jComboBoxMostrar.getSelectedItem().toString().equalsIgnoreCase("Receita")) {
            try {
                movimentacao = ServicoMovimentacao.procurarMovimentacao(palavra);
            } catch (MovimentacaoException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DataSourceException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            }

            DefaultTableModel model = (DefaultTableModel) jTableMovimentacao.getModel();
            model.setRowCount(0);

            if (movimentacao == null || movimentacao.size() <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Não há movimentações cadastradas! ",
                        "Sem resultados", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                for (int i = 0; i < movimentacao.size(); i++) {
                    Object[] row = new Object[7];
                    Movimentacao mov = movimentacao.get(i);
                    try {
                        if (servicoTelaInicial.verificaMesTabela(mov.getDataMovimentacao(), jComboBoxMesVigente.getSelectedItem().toString()) == true
                                && servicoTelaInicial.verificaAnoTabela(mov.getDataMovimentacao(), jComboBoxAnoVigente.getSelectedItem().toString()) == true
                                && mov.getTipoMovimentacao().equalsIgnoreCase("Receita")) {
                            row[0] = mov.getIdMovimentacao();
                            row[1] = mov.getTipoMovimentacao();
                            row[2] = mov.getNomeMovimentacao();
                            row[3] = mov.getProprietarioDaMovimentacao();
                            row[4] = mov.getValorMovimentacao().replace('.', ',');
                            row[5] = mov.getDataMovimentacao();
                            row[6] = mov.getStatusDespesa();
                            model.addRow(row);

                            if (mov.getTipoMovimentacao().equalsIgnoreCase("despesa")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaDespesa = somaDespesa.add(recebeValor);
                            } else if (mov.getTipoMovimentacao().equalsIgnoreCase("receita")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaReceita = somaReceita.add(recebeValor);
                            }
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                total = somaReceita.subtract(somaDespesa);
                jLabelTotalDespesas.setText("Despesas: R$ " + somaDespesa.toString().replace('.', ','));
                jLabelTotalReceita.setText("Receita: R$ " + somaReceita.toString().replace('.', ','));
                jLabelTotalRestante.setText("Total: R$ " + total.toString().replace('.', ','));
            }
        } else if (jComboBoxMostrar.getSelectedItem().toString().equalsIgnoreCase("Despesa")) {
            try {
                movimentacao = ServicoMovimentacao.procurarMovimentacao(palavra);
            } catch (MovimentacaoException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DataSourceException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            }

            DefaultTableModel model = (DefaultTableModel) jTableMovimentacao.getModel();
            model.setRowCount(0);

            if (movimentacao == null || movimentacao.size() <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Não há movimentações cadastradas! ",
                        "Sem resultados", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                for (int i = 0; i < movimentacao.size(); i++) {
                    Object[] row = new Object[7];
                    Movimentacao mov = movimentacao.get(i);
                    try {
                        if (servicoTelaInicial.verificaMesTabela(mov.getDataMovimentacao(), jComboBoxMesVigente.getSelectedItem().toString()) == true
                                && servicoTelaInicial.verificaAnoTabela(mov.getDataMovimentacao(), jComboBoxAnoVigente.getSelectedItem().toString()) == true
                                && mov.getTipoMovimentacao().equalsIgnoreCase("Despesa")) {
                            row[0] = mov.getIdMovimentacao();
                            row[1] = mov.getTipoMovimentacao();
                            row[2] = mov.getNomeMovimentacao();
                            row[3] = mov.getProprietarioDaMovimentacao();
                            row[4] = mov.getValorMovimentacao().replace('.', ',');
                            row[5] = mov.getDataMovimentacao();
                            row[6] = mov.getStatusDespesa();
                            model.addRow(row);

                            if (mov.getTipoMovimentacao().equalsIgnoreCase("despesa")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaDespesa = somaDespesa.add(recebeValor);
                            } else if (mov.getTipoMovimentacao().equalsIgnoreCase("receita")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaReceita = somaReceita.add(recebeValor);
                            }
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                total = somaReceita.subtract(somaDespesa);
                jLabelTotalDespesas.setText("Despesas: R$ " + somaDespesa.toString().replace('.', ','));
                jLabelTotalReceita.setText("Receita: R$ " + somaReceita.toString().replace('.', ','));
                jLabelTotalRestante.setText("Total: R$ " + total.toString().replace('.', ','));
            }
        } else if (jComboBoxMostrar.getSelectedItem().toString().equalsIgnoreCase("Stephanie")) {
            try {
                movimentacao = ServicoMovimentacao.procurarMovimentacao(palavra);
            } catch (MovimentacaoException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DataSourceException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            }

            DefaultTableModel model = (DefaultTableModel) jTableMovimentacao.getModel();
            model.setRowCount(0);

            if (movimentacao == null || movimentacao.size() <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Não há movimentações cadastradas! ",
                        "Sem resultados", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                for (int i = 0; i < movimentacao.size(); i++) {
                    Object[] row = new Object[7];
                    Movimentacao mov = movimentacao.get(i);
                    try {
                        if (servicoTelaInicial.verificaMesTabela(mov.getDataMovimentacao(), jComboBoxMesVigente.getSelectedItem().toString()) == true
                                && servicoTelaInicial.verificaAnoTabela(mov.getDataMovimentacao(), jComboBoxAnoVigente.getSelectedItem().toString()) == true
                                && mov.getProprietarioDaMovimentacao().equalsIgnoreCase("Stephanie")) {
                            row[0] = mov.getIdMovimentacao();
                            row[1] = mov.getTipoMovimentacao();
                            row[2] = mov.getNomeMovimentacao();
                            row[3] = mov.getProprietarioDaMovimentacao();
                            row[4] = mov.getValorMovimentacao().replace('.', ',');
                            row[5] = mov.getDataMovimentacao();
                            row[6] = mov.getStatusDespesa();
                            model.addRow(row);

                            if (mov.getTipoMovimentacao().equalsIgnoreCase("despesa")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaDespesa = somaDespesa.add(recebeValor);
                            } else if (mov.getTipoMovimentacao().equalsIgnoreCase("receita")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaReceita = somaReceita.add(recebeValor);
                            }
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                total = somaReceita.subtract(somaDespesa);
                jLabelTotalDespesas.setText("Despesas: R$ " + somaDespesa.toString().replace('.', ','));
                jLabelTotalReceita.setText("Receita: R$ " + somaReceita.toString().replace('.', ','));
                jLabelTotalRestante.setText("Total: R$ " + total.toString().replace('.', ','));
            }
        } else if (jComboBoxMostrar.getSelectedItem().toString().equalsIgnoreCase("Jonata")) {
            try {
                movimentacao = ServicoMovimentacao.procurarMovimentacao(palavra);
            } catch (MovimentacaoException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DataSourceException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            }

            DefaultTableModel model = (DefaultTableModel) jTableMovimentacao.getModel();
            model.setRowCount(0);

            if (movimentacao == null || movimentacao.size() <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Não há movimentações cadastradas! ",
                        "Sem resultados", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                for (int i = 0; i < movimentacao.size(); i++) {
                    Object[] row = new Object[7];
                    Movimentacao mov = movimentacao.get(i);
                    try {
                        if (servicoTelaInicial.verificaMesTabela(mov.getDataMovimentacao(), jComboBoxMesVigente.getSelectedItem().toString()) == true
                                && servicoTelaInicial.verificaAnoTabela(mov.getDataMovimentacao(), jComboBoxAnoVigente.getSelectedItem().toString()) == true
                                && mov.getProprietarioDaMovimentacao().equalsIgnoreCase("Jonata")) {
                            row[0] = mov.getIdMovimentacao();
                            row[1] = mov.getTipoMovimentacao();
                            row[2] = mov.getNomeMovimentacao();
                            row[3] = mov.getProprietarioDaMovimentacao();
                            row[4] = mov.getValorMovimentacao().replace('.', ',');
                            row[5] = mov.getDataMovimentacao();
                            row[6] = mov.getStatusDespesa();
                            model.addRow(row);

                            if (mov.getTipoMovimentacao().equalsIgnoreCase("despesa")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaDespesa = somaDespesa.add(recebeValor);
                            } else if (mov.getTipoMovimentacao().equalsIgnoreCase("receita")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaReceita = somaReceita.add(recebeValor);
                            }
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                total = somaReceita.subtract(somaDespesa);
                jLabelTotalDespesas.setText("Despesas: R$ " + somaDespesa.toString().replace('.', ','));
                jLabelTotalReceita.setText("Receita: R$ " + somaReceita.toString().replace('.', ','));
                jLabelTotalRestante.setText("Total: R$ " + total.toString().replace('.', ','));
            }
        } else if (jComboBoxMostrar.getSelectedItem().toString().equalsIgnoreCase("Casa")) {
            try {
                movimentacao = ServicoMovimentacao.procurarMovimentacao(palavra);
            } catch (MovimentacaoException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DataSourceException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            }

            DefaultTableModel model = (DefaultTableModel) jTableMovimentacao.getModel();
            model.setRowCount(0);

            if (movimentacao == null || movimentacao.size() <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Não há movimentações cadastradas! ",
                        "Sem resultados", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                for (int i = 0; i < movimentacao.size(); i++) {
                    Object[] row = new Object[7];
                    Movimentacao mov = movimentacao.get(i);
                    try {
                        if (servicoTelaInicial.verificaMesTabela(mov.getDataMovimentacao(), jComboBoxMesVigente.getSelectedItem().toString()) == true
                                && servicoTelaInicial.verificaAnoTabela(mov.getDataMovimentacao(), jComboBoxAnoVigente.getSelectedItem().toString()) == true
                                && mov.getProprietarioDaMovimentacao().equalsIgnoreCase("Casa")) {
                            row[0] = mov.getIdMovimentacao();
                            row[1] = mov.getTipoMovimentacao();
                            row[2] = mov.getNomeMovimentacao();
                            row[3] = mov.getProprietarioDaMovimentacao();
                            row[4] = mov.getValorMovimentacao().replace('.', ',');
                            row[5] = mov.getDataMovimentacao();
                            row[6] = mov.getStatusDespesa();
                            model.addRow(row);

                            if (mov.getTipoMovimentacao().equalsIgnoreCase("despesa")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaDespesa = somaDespesa.add(recebeValor);
                            } else if (mov.getTipoMovimentacao().equalsIgnoreCase("receita")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaReceita = somaReceita.add(recebeValor);
                            }
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                total = somaReceita.subtract(somaDespesa);
                jLabelTotalDespesas.setText("Despesas: R$ " + somaDespesa.toString().replace('.', ','));
                jLabelTotalReceita.setText("Receita: R$ " + somaReceita.toString().replace('.', ','));
                jLabelTotalRestante.setText("Total: R$ " + total.toString().replace('.', ','));
            }
        } else if (jComboBoxMostrar.getSelectedItem().toString().equalsIgnoreCase("Carro")) {
            try {
                movimentacao = ServicoMovimentacao.procurarMovimentacao(palavra);
            } catch (MovimentacaoException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DataSourceException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            }

            DefaultTableModel model = (DefaultTableModel) jTableMovimentacao.getModel();
            model.setRowCount(0);

            if (movimentacao == null || movimentacao.size() <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Não há movimentações cadastradas! ",
                        "Sem resultados", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                for (int i = 0; i < movimentacao.size(); i++) {
                    Object[] row = new Object[7];
                    Movimentacao mov = movimentacao.get(i);
                    try {
                        if (servicoTelaInicial.verificaMesTabela(mov.getDataMovimentacao(), jComboBoxMesVigente.getSelectedItem().toString()) == true
                                && servicoTelaInicial.verificaAnoTabela(mov.getDataMovimentacao(), jComboBoxAnoVigente.getSelectedItem().toString()) == true
                                && mov.getProprietarioDaMovimentacao().equalsIgnoreCase("Carro")) {
                            row[0] = mov.getIdMovimentacao();
                            row[1] = mov.getTipoMovimentacao();
                            row[2] = mov.getNomeMovimentacao();
                            row[3] = mov.getProprietarioDaMovimentacao();
                            row[4] = mov.getValorMovimentacao().replace('.', ',');
                            row[5] = mov.getDataMovimentacao();
                            row[6] = mov.getStatusDespesa();
                            model.addRow(row);

                            if (mov.getTipoMovimentacao().equalsIgnoreCase("despesa")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaDespesa = somaDespesa.add(recebeValor);
                            } else if (mov.getTipoMovimentacao().equalsIgnoreCase("receita")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaReceita = somaReceita.add(recebeValor);
                            }
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                total = somaReceita.subtract(somaDespesa);
                jLabelTotalDespesas.setText("Despesas: R$ " + somaDespesa.toString().replace('.', ','));
                jLabelTotalReceita.setText("Receita: R$ " + somaReceita.toString().replace('.', ','));
                jLabelTotalRestante.setText("Total: R$ " + total.toString().replace('.', ','));
            }
        } else if (jComboBoxMostrar.getSelectedItem().toString().equalsIgnoreCase("Lazer")) {
            try {
                movimentacao = ServicoMovimentacao.procurarMovimentacao(palavra);
            } catch (MovimentacaoException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DataSourceException ex) {
                Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            }

            DefaultTableModel model = (DefaultTableModel) jTableMovimentacao.getModel();
            model.setRowCount(0);

            if (movimentacao == null || movimentacao.size() <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Não há movimentações cadastradas! ",
                        "Sem resultados", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                for (int i = 0; i < movimentacao.size(); i++) {
                    Object[] row = new Object[7];
                    Movimentacao mov = movimentacao.get(i);
                    try {
                        if (servicoTelaInicial.verificaMesTabela(mov.getDataMovimentacao(), jComboBoxMesVigente.getSelectedItem().toString()) == true
                                && servicoTelaInicial.verificaAnoTabela(mov.getDataMovimentacao(), jComboBoxAnoVigente.getSelectedItem().toString()) == true
                                && mov.getProprietarioDaMovimentacao().equalsIgnoreCase("Lazer")) {
                            row[0] = mov.getIdMovimentacao();
                            row[1] = mov.getTipoMovimentacao();
                            row[2] = mov.getNomeMovimentacao();
                            row[3] = mov.getProprietarioDaMovimentacao();
                            row[4] = mov.getValorMovimentacao().replace('.', ',');
                            row[5] = mov.getDataMovimentacao();
                            row[6] = mov.getStatusDespesa();
                            model.addRow(row);

                            if (mov.getTipoMovimentacao().equalsIgnoreCase("despesa")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaDespesa = somaDespesa.add(recebeValor);
                            } else if (mov.getTipoMovimentacao().equalsIgnoreCase("receita")) {
                                BigDecimal recebeValor = new BigDecimal(mov.getValorMovimentacao().replace(',', '.'));
                                somaReceita = somaReceita.add(recebeValor);
                            }
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                total = somaReceita.subtract(somaDespesa);
                jLabelTotalDespesas.setText("Despesas: R$ " + somaDespesa.toString().replace('.', ','));
                jLabelTotalReceita.setText("Receita: R$ " + somaReceita.toString().replace('.', ','));
                jLabelTotalRestante.setText("Total: R$ " + total.toString().replace('.', ','));
            }
        }
    }//GEN-LAST:event_jButtonAtualizarActionPerformed

    private void jButtonRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoverActionPerformed
        try {
            final int row = jTableMovimentacao.getSelectedRow();
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Deseja realmente remover "
                    + jTableMovimentacao.getValueAt(row, 1) + "?");
            if (dialogResult == 0) {
                if (row >= 0) {
                    Integer id = (Integer) jTableMovimentacao.getValueAt(row, 0);
                    ServicoMovimentacao.removerMovimentacao(id);
                    JOptionPane.showMessageDialog(this, "Movimentação removida com sucesso!");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Selecione a movimentação a ser removida!", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonRemoverActionPerformed

    private void jComboBoxMesVigenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMesVigenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxMesVigenteActionPerformed

    public void openFrameInCenter(JInternalFrame jif) {
        Dimension desktopSize = desktop.getSize();
        Dimension jInternalFrameSize = jif.getSize();
        int width = (desktopSize.width - jInternalFrameSize.width) / 2;
        int height = (desktopSize.height - jInternalFrameSize.height) / 2;
        jif.setLocation(width, height);
        jif.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaInicial().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JButton jButtonAlterarStatus;
    private javax.swing.JButton jButtonAtualizar;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonNovaMovimentacao;
    private javax.swing.JButton jButtonRemover;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JComboBox<String> jComboBoxAnoVigente;
    private javax.swing.JComboBox<String> jComboBoxMesVigente;
    private javax.swing.JComboBox<String> jComboBoxMostrar;
    private javax.swing.JLabel jLabelMostrar;
    private javax.swing.JLabel jLabelTotalDespesas;
    private javax.swing.JLabel jLabelTotalReceita;
    private javax.swing.JLabel jLabelTotalRestante;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableMovimentacao;
    // End of variables declaration//GEN-END:variables

}
